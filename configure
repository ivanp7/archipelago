#!/bin/sh
set -eu
PROJECT_DIR="$(realpath -- "$(dirname -- "$0")")"

###############################################################################
# Set variables
###############################################################################

: ${PROJECT_NAME:="station"}
: ${PROJECT_DESCRIPTION:="A finite state machine implementation."}
: ${PROJECT_VERSION:="1.0"}

IDIR="include"
SDIR="src"
ODIR="build"

FILE_LIBRARY="library"
FILE_APPLICATION="application"
FILE_APPLICATION_GGO="application.ggo"

FILE_APPLICATION_ARGS="application_args"
GGO_FUNC_PREFIX="args_parser"

OUT_LIBRARY_STATIC="lib${PROJECT_NAME}.a"
OUT_LIBRARY_SHARED="lib${PROJECT_NAME}.so"
OUT_APPLICATION="${PROJECT_NAME}-app"

PKG_CONF="${PROJECT_NAME}.pc"
NINJA="build.ninja"

: ${CC:="gcc"}
: ${AR:="ar"}

###############################################################################
# Parse command line arguments
###############################################################################

usage () { echo "usage:"; grep '^\s*[^*]) # ' "$0" | sed -E 's,(.)\) # ,-\1  ,'; exit 0; }
optlist () { grep '^\s*[^*]) # ' "$0" | sed -E 's,^\s*(.)\) # .*,\1,' | tr -d '\n'; }

[ "$#" = 0 ] && usage
while getopts ":$(optlist)" arg
do
    case "$arg" in
        s) # output: build shared library (.so) instead of static (.a)
            OUTPUT_LIBRARY_SHARED="true"
            ;;

        a) # output: build application by default
            OUTPUT_APPLICATION="true"
            ;;

        d) # build type: debug (conflicts with -o and -p)
            [ "${BUILD_TYPE:-}" ] && { echo "Build type cannot be specified multiple times"; exit 1; }
            BUILD_TYPE="debug"
            ;;

        p) # build type: profiling (conflicts with -d and -o)
            [ "${BUILD_TYPE:-}" ] && { echo "Build type cannot be specified multiple times"; exit 1; }
            BUILD_TYPE="profiling"
            ;;

        o) # build type: optimized (conflicts with -d and -p)
            [ "${BUILD_TYPE:-}" ] && { echo "Build type cannot be specified multiple times"; exit 1; }
            BUILD_TYPE="optimized"
            ;;

        A) # feature: enable use of ANSI escape codes in application output
            FEATURE_IS_ANSI_ESCAPE_CODES_ENABLED="true"
            ;;

        S) # feature: enable signal management support
            FEATURE_IS_SIGNAL_MANAGEMENT_SUPPORTED="true"
            ;;

        M) # feature: enable support for Simple DirectMedia Layer (SDL)
            FEATURE_IS_SDL_SUPPORTED="true"
            ;;

        O) # feature: enable support for OpenCL
            FEATURE_IS_OPENCL_SUPPORTED="true"
            ;;

        Y) # feature: enable thread yielding
            FEATURE_IS_THREAD_YIELD_ENABLED="true"
            ;;

        *) # display help
            usage
    esac
done

[ "${BUILD_TYPE:-}" ] || { echo "Build type is not specified"; exit 1; }

###############################################################################
# Set flags
###############################################################################

: ${INSTALL_IFLAGS:="-I${PROJECT_DIR}/${IDIR}"}
: ${INSTALL_LDIR:="${PROJECT_DIR}/${ODIR}"}

if [ "${FEATURE_IS_SDL_SUPPORTED:-}" ]
then
    CFLAGS_SDL="$(pkg-config --cflags sdl2)"
    LFLAGS_SDL="$(pkg-config --libs sdl2)"
else
    CFLAGS_SDL=""
    LFLAGS_SDL=""
fi

if [ "${FEATURE_IS_OPENCL_SUPPORTED:-}" ]
then
    CFLAGS_OPENCL="$(pkg-config --cflags OpenCL) -DCL_TARGET_OPENCL_VERSION=300"
    LFLAGS_OPENCL="$(pkg-config --libs OpenCL)"
else
    CFLAGS_OPENCL=""
    LFLAGS_OPENCL=""
fi

CFLAGS_COMMON="-pthread $CFLAGS_SDL $CFLAGS_OPENCL \
${FEATURE_IS_SIGNAL_MANAGEMENT_SUPPORTED:+"-DSTATION_IS_SIGNAL_MANAGEMENT_SUPPORTED"} \
${FEATURE_IS_SDL_SUPPORTED:+"-DSTATION_IS_SDL_SUPPORTED"} \
${FEATURE_IS_OPENCL_SUPPORTED:+"-DSTATION_IS_OPENCL_SUPPORTED"}"
LFLAGS_COMMON="$LFLAGS_SDL $LFLAGS_OPENCL"

case "${BUILD_TYPE:-}" in
    "debug") CFLAGS_BUILD_TYPE="-O0 -g3 -ggdb" ;; # -Og causes <optimized out> errors in gdb
    "profiling") CFLAGS_BUILD_TYPE="-O2 -flto -g0 -DNDEBUG -pg" ;;
    "optimized") CFLAGS_BUILD_TYPE="-O2 -flto -g0 -DNDEBUG" ;;
    *) echo "Unknown build type"; exit 1
esac

CFLAGS="-march=native -pipe -std=c17 -Wall -Wextra -Wpedantic -pedantic-errors \
-Wmissing-prototypes -Wstrict-prototypes -Wold-style-definition \
-I${PROJECT_DIR}/${IDIR} \
$CFLAGS_COMMON \
$CFLAGS_BUILD_TYPE"

CFLAGS_LIBRARY="${OUTPUT_LIBRARY_SHARED:+"-fPIC"} \
${FEATURE_IS_THREAD_YIELD_ENABLED:+"-DSTATION_IS_THREAD_YIELD_ENABLED"}"
CFLAGS_APPLICATION="-I${PROJECT_DIR}/${ODIR} \
${FEATURE_IS_ANSI_ESCAPE_CODES_ENABLED:+"-DSTATION_IS_ANSI_ESCAPE_CODES_ENABLED"}"

LFLAGS="$LFLAGS_COMMON"

###############################################################################
# Generate pkg-config file
###############################################################################

cat <<  _EOF_ > "${PROJECT_DIR}/${PKG_CONF}"
Name: ${PROJECT_NAME}
Description: ${PROJECT_DESCRIPTION}
Version: ${PROJECT_VERSION}
Cflags: $CFLAGS_COMMON $INSTALL_IFLAGS
_EOF_

if [ "${OUTPUT_LIBRARY_SHARED:-}" ]
then
    echo "Libs: $LFLAGS_COMMON -L${INSTALL_LDIR} -l${PROJECT_NAME}" >> "${PROJECT_DIR}/${PKG_CONF}"
else
    echo "Libs: $LFLAGS_COMMON -Wl,--whole-archive ${INSTALL_LDIR}/${OUT_LIBRARY_STATIC} -Wl,--no-whole-archive" >> "${PROJECT_DIR}/${PKG_CONF}"
fi

###############################################################################
# Generate build.ninja
###############################################################################

cat <<  _EOF_ > "${PROJECT_DIR}/${NINJA}"
cflags = $CFLAGS
cflags_lib = $CFLAGS_LIBRARY
cflags_app = $CFLAGS_APPLICATION
lflags = $LFLAGS


rule gengetopt
    description = gengetopt < \$in
    command = gengetopt --file-name="${FILE_APPLICATION_ARGS}" --func-name="${GGO_FUNC_PREFIX}" --output-dir="${ODIR}" \
--set-package="${OUT_APPLICATION}" --set-version="${PROJECT_VERSION}" < \$in

rule cc
    description = cc \$in
    depfile = \$out.d
    deps = gcc
    command = ${CC} -MD -MF \$out.d \$cflags \$cflags_custom -c -o \$out \$in

rule ar
    description = ar \$in
    command = ${AR} rcs \$out \$in

rule link
    description = link \$in
    command = ${CC} \$cflags \$cflags_custom \$lflags \$lflags_custom -o \$out \$in


build ${ODIR}/${FILE_LIBRARY}.o: cc ${SDIR}/${FILE_LIBRARY}.c
    cflags_custom = \$cflags_lib
_EOF_

if [ "${OUTPUT_LIBRARY_SHARED:-}" ]
then
    cat <<  _EOF_ >> "${PROJECT_DIR}/${NINJA}"

build ${ODIR}/${OUT_LIBRARY_SHARED}: link ${ODIR}/${FILE_LIBRARY}.o
    cflags_custom = \$cflags_lib
    lflags_custom = -shared -rdynamic

build library: phony ${ODIR}/${OUT_LIBRARY_SHARED}
_EOF_
else
    cat <<  _EOF_ >> "${PROJECT_DIR}/${NINJA}"

build ${ODIR}/${OUT_LIBRARY_STATIC}: ar ${ODIR}/${FILE_LIBRARY}.o
    cflags_custom = \$cflags_lib

build library: phony ${ODIR}/${OUT_LIBRARY_STATIC}
_EOF_
fi

cat <<  _EOF_ >> "${PROJECT_DIR}/${NINJA}"


build ${ODIR}/${FILE_APPLICATION_ARGS}.h ${ODIR}/${FILE_APPLICATION_ARGS}.c: gengetopt ${SDIR}/${FILE_APPLICATION_GGO}

build ${ODIR}/${FILE_APPLICATION_ARGS}.o: cc ${ODIR}/${FILE_APPLICATION_ARGS}.c
    cflags_custom = \$cflags_app

build ${ODIR}/${FILE_APPLICATION}.o: cc ${SDIR}/${FILE_APPLICATION}.c | ${ODIR}/${FILE_APPLICATION_ARGS}.h
    cflags_custom = \$cflags_app

build ${ODIR}/${OUT_APPLICATION}: link ${ODIR}/${FILE_LIBRARY}.o ${ODIR}/${FILE_APPLICATION_ARGS}.o ${ODIR}/${FILE_APPLICATION}.o
    cflags_custom = \$cflags_app

build application: phony ${ODIR}/${OUT_APPLICATION}


default library
_EOF_

if [ "${OUTPUT_APPLICATION:-}" ]
then
    echo "default application" >> "${PROJECT_DIR}/${NINJA}"
fi

